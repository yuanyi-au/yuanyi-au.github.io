<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yuanyi&#39;s blog</title>
    <link>/</link>
    <description>yuanyi 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2021, yuanyi; All rights reserved.</copyright><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
      <item>
        <title>开源入门之路</title>
        <link>/posts/opensource.html</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/posts/opensource.html</guid>
        <description>今年夏天有幸参与了 OSPP 2021 这个活动，终于第一次真正接触到向往已久的开源，以这篇文章记录我在这条路上的旅程，希望能越走越远，以后有更多经验分享给大家。
前言 首先我想说的是，参与开源并不是必须贡献代码，文档写作、视觉设计、组织宣传等也是项目中非常重要的部分。以及在项目社区或者 GitHub Issues 里进行反馈和解答其他人提出的问题，这些都是对开源社区很好的贡献。
参与开源你需要知道的最重要的事情就是，大胆提问，大胆提交 PR。
如果项目文档和谷歌搜索都不能解决你的疑问，不要害怕提问，项目维护者能够快速帮助你找到解决问题的方向，而且换个角度想，其他拥有同样疑惑的人也能搜索到你与项目维护者的交流过程，从中受益。也不要担心自己的代码不够好，项目维护者会对你提交的代码进行 review，如果有问题会给出建议，这其实是一个很好的学习机会。
在这篇文章里有提到，实际上 28% 的贡献都是随意贡献（比如修正语法排版错误等），修补 bug 的贡献其实也只占到 30%。所以，不要担心，勇敢地在项目中积极交流贡献。
最后一点，保持礼貌！
参与项目的基本流程  找到你想要参与的项目 如果毫无头绪，我认为最好从自己熟悉的项目开始下手。在之前做项目的过程中肯定用过许多其他工具，在 GitHub 上搜索它们的项目仓库会是一个不错的开始。当然你也可以通过 GitHub 的 Explore 板块，或者 Open Source Friday 之类的网站来寻找项目。
请注意一个项目的活跃度以及最后活跃时间，项目维护者对 issue 以及 PR 的响应速度如何，以及整个项目的交流氛围，这些都是非常重要的考虑因素。
较大的开源项目都会有 CONTRIBUTING 文档，用来说明如何为项目做贡献，请仔细阅读。
 看看 Issues 都有些什么 很多开源项目在 Issues 板块都会有 good first issue ，这些 Issue 通常都比较容易上手，有的项目负责人还会给出一些参考指引，是为了让第一次参与该项目的贡献者能够快速熟悉和参与到项目中来。
如果你想要做出某个实际贡献，先看看 Issues 里有没有类似的问题以及是否被解决，如果没有，你可以先创建一个 Issue 让参与项目的其他人知道你要进行这方面的工作，总之，将问题进度公开，以避免重复劳动。
创建 Issue 要注意的问题：
 提供具体的环境配置、操作步骤以及问题的详细情况 用文字描述，方便其他人检索 做好标签分类   Pull Request 基本流程 如果你对项目里的一些问题有了解决方案，可以通过 pull request 提交代码</description>
      </item>
    
      <item>
        <title>git 笔记 (1)</title>
        <link>/notes/git-1.html</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/git-1.html</guid>
        <description>本篇笔记的内容包括常用命令以及 commit message 规范
常用命令  名词 workplace 工作区
stage 暂存区
repository 本地仓库
remote 远程仓库
 新建仓库 git init 在当前目录新建一个本地仓库
git clone 将一个远程仓库的内容下载到本地
 文件的增加、删除、提交 git add [filename] 将文件从工作区添加到暂存区
git rm [filename] 删除工作区文件
git rm --cached [filename] 停止追踪指定文件，但该文件会保留在工作区
git mv [originalname] [newname] 文件重命名，并将该文件放入暂存区
git commit - &amp;quot;message&amp;quot; 将暂存区文件提交到本地仓库
git commit -amend -m &amp;quot;message&amp;quot; 用一次新的 commit 代替上次 commit，可以用来改写 commit message
 分支管理 git branch 查看所有本地分支
git branch -a 查看所有本地分支与远程分支
git branch [branch] 新建一个分支，但依然停留在当前分支</description>
      </item>
    
      <item>
        <title>git 笔记 (2)</title>
        <link>/notes/git-2.html</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/git-2.html</guid>
        <description>git rebase  合并不同分支的提交 将 b 分支上的提交合并到 a 分支上成为一条直线
git checkout bgit rebase a 与 merge 的区别 ***永远不要在公共项目里使用 rebase ***
merge 采用的是三方合并的原则，没有公共提交节点就无法进行合并
git rebase: git merge: rebase 和 merge 的另一个区别是 rebase 的冲突是一个一个解决，先解决第一个，然后用命令
git add -ugit rebase --continue继续后才会出现第二个冲突，直到所有冲突解决完，而 merge 是所有的冲突都会显示出来。另外如果 rebase 过程中，你想中途退出，恢复 rebase 前的代码则可以用命令
git rebase --abort
 合并本地的多次提交 合并最新的三次提交
git rebase -i HEAD~3
git reabse -i 合并 commit 之后会出现一个匿名的分支，并不是在原来的分支上把 commit 给合并，而是从合并的 start point 开始新生成一个匿名分支然后把原来分支那几个 commit 作为一个 commit 放到新分支上</description>
      </item>
    
      <item>
        <title>利用 Hugo 搭建网站</title>
        <link>/notes/hugo-website.html</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/hugo-website.html</guid>
        <description>本篇笔记介绍了如何利用 Hugo 框架搭建网站并部署到 GitHub 上，以及我在建站过程中遇到的问题和解决办法
快速开始  Windows: 最简单的方法是直接下载 最新版本的 hugo 安装
请安装 extended 版本，可以对 scss 文件进行编译，否则在之后使用模板时会出现问题
注意：要把 hugo 的路径添加到环境变量 Path 中！
我在下载安装扩展版本的时候有点问题，最后重新用 Chocolatey 安装成功，非常方便
 MacOS： 其它系统的安装过程可以看官网文档
 新建网站 hugo version 检查安装是否成功
hugo new site [sitename] 创建一个新的网站
hugo server 开启 Hugo 服务器，可以在本地预览调试网站
结构目录 .├── archetypes ├── config.toml├── content├── data├── layouts├── static└── themes content 文件夹 存放网站的主要内容 md 文件
在该文件夹下的文件结构目录直接对应网站结构
通常md文件开头如下（一般可以在 archetypes 文件夹中找到）：</description>
      </item>
    
      <item>
        <title>package.json 与 package-lock.json</title>
        <link>/notes/package.json-package-lock.json.html</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/package.json-package-lock.json.html</guid>
        <description>package.json 描述项目所需要的各种模块以及配置信息，可以手动编写，也可以在项目根目录用 npm init 自动生成
{&amp;quot;name&amp;quot;: &amp;quot;tech-doc-hugo&amp;quot;,&amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,&amp;quot;description&amp;quot;: &amp;quot;Hugo theme for technical documentation.&amp;quot;,&amp;quot;main&amp;quot;: &amp;quot;none.js&amp;quot;,&amp;quot;scripts&amp;quot;: {&amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;},&amp;quot;repository&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,&amp;quot;url&amp;quot;: &amp;quot;git+https://github.com/google/docsy-example.git&amp;quot;},&amp;quot;author&amp;quot;: &amp;quot;&amp;quot;,&amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,&amp;quot;bugs&amp;quot;: {&amp;quot;url&amp;quot;: &amp;quot;https://github.com/google/docsy-example/issues&amp;quot;},&amp;quot;homepage&amp;quot;: &amp;quot;https://github.com/google/docsy-example#readme&amp;quot;,&amp;quot;dependencies&amp;quot;: {},&amp;quot;devDependencies&amp;quot;: {&amp;quot;autoprefixer&amp;quot;: &amp;quot;^9.8.6&amp;quot;,&amp;quot;postcss-cli&amp;quot;: &amp;quot;^7.1.2&amp;quot;}}package.json 文件要求必须包括name 和 version 属性
 author：作者，是在 npmjs.org 网站上的有效账户名 main：指定加载入口，默认值时模块根目录下的 index.js script：指定命令行缩写所要执行的命令，默认是一个空的 test 脚本 repository：代码库地址，会直接在组件库的 npm 首页生效 bugs：开发者联系方式，一般是代码库的 issues 地址 dependencies：指定项目运行所需要的模块 devDependencies：指定项目开发所需要的模块 bin：指定各个内部命令对应的可执行文件的位置 license：开源协议，可看Choose an open source license config：用于添加命令行的环境变量   依赖模块的版本  指定版本 16.</description>
      </item>
    
      <item>
        <title>使用 Netlify 部署个人网站以及预览 GitHub 上的 PR</title>
        <link>/notes/netlify.html</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/netlify.html</guid>
        <description>Netlify 是一个可以用来构建、部署、协作处理 Web 应用程序的云平台
本篇笔记介绍了如何在 GitHub 上添加 Netlify 以便预览提交的 Pull Request 效果
也可以参考此笔记将自己的网站部署在 Netlify 上
安装准备 在 GitHub 上安装 Netlify ，授权 GitHub 账号
或者你也可以选择在 Netlify 官网 上进行注册授权
New site from Git 选择平台 - 选择仓库 - 选择分支 - 基本设置 - deploy site
 基本设置 常见框架对应的 Build command 和 Publish directory 可以看 官网文档
 环境变量 如果第一次 deploy 失败，请查看环境设置，检查版本是否正确
Site settings &amp;gt; Build &amp;amp; deploy &amp;gt; Environment &amp;gt; Environment variables
 修改域名 Netlify 会自动以你的 site name 生成一个域名：[name-of-your-site].</description>
      </item>
    
      <item>
        <title>学习历程</title>
        <link>/posts/learning-process.html</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/posts/learning-process.html</guid>
        <description>转码的整个时间线 &amp;amp; 踩过的所有坑，个人体验仅供参考：
 第一阶段（2020.11初~2020.12末）  第二阶段（2021.1中~2021.4中）  第三阶段（2021.4末~2021.5初）  第四阶段（2021.5初~2021.6末）  第五阶段（2021.7初~2021.8中） </description>
      </item>
    
      <item>
        <title>关于我</title>
        <link>/about.html</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/about.html</guid>
        <description> 个人介绍 大家好，我是四川大学化学系2022届本科生，从2020年11月开始零基础转码，一路上遇到了无数问题与困难，同样也得到了无数帮助与鼓励，真的非常感激曾经遇到的每一位朋友。所以也想在这里记录一些自己的经验，希望能够或多或少帮助到其他人。
能发现自己对计算机的热爱是我最近几年遇到的最幸运的事情之一。我也非常幸运地拥有真正理解我的朋友和父母，感谢他们的信任与陪伴。也要特别感谢豆瓣的 Women In Tech 小组，感谢组里各位姐妹的帮助、鼓励与支持。希望科技行业能有越来越多有力量的女性，也希望我的这些经验分享能为此目标增添一份绵薄之力。
祝愿大家都能探索出自己的路！
 有任何问题可以与我联系： 名字邮箱主题打个招呼!有个问题?内容</description>
      </item>
    
  </channel>
</rss>