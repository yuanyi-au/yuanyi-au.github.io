<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yuanyi 的博客</title>
    <link>/</link>
    <description>yuanyi 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2021, yuanyi; All rights reserved.</copyright><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
      <item>
        <title>利用 Hugo 搭建网站</title>
        <link>/notes/hugo-website/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/hugo-website/</guid>
        <description>本篇笔记介绍了如何利用 Hugo 框架搭建网站并部署到 GitHub 上，以及我在建站过程中遇到的一些问题
快速开始  windows: 最简单的方法是直接下载 最新版本的 hugo 安装
直接安装 extended 版本，可以对 scss 文件进行编译，否则在之后使用模板时会出现问题
注意：要把 hugo 的路径添加到环境变量 Path 中！
我在下载安装扩展版本的时候有点问题，最后重新用 Chocolatey 安装成功
 MacOS： brew install hugo
 新建网站 hugo version 检查安装是否成功
hugo new site [sitename] 创建一个新的网站
hugo server 开启 Hugo 服务器，可以在本地预览调试网站
结构目录 .├── archetypes ├── config.toml├── content├── data├── layouts├── static└── themes content 文件夹 存放网站的主要内容 md 文件
在该文件夹下的文件结构目录直接对应网站结构
通常md文件开头如下（一般可以在 archetypes 文件夹中找到）：</description>
      </item>
    
      <item>
        <title>学习历程</title>
        <link>/posts/learning-process/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/posts/learning-process/</guid>
        <description>转码的整个时间线 &amp;amp; 踩过的所有坑，个人体验仅供参考：
 第一阶段（2020.11初~2020.12末）  第二阶段（2021.1中~2021.4中）  第三阶段（2021.4末~2021.5初）  第四阶段（2021.5初~2021.6末）  第五阶段（2021.7初~2021.8中） </description>
      </item>
    
      <item>
        <title>面试准备</title>
        <link>/posts/interviews/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/posts/interviews/</guid>
        <description>面试相关的非技术性经验，会不断补充
面试相关的技术问题总结会放在 Github 上</description>
      </item>
    
      <item>
        <title>git 笔记(1) 基础入门</title>
        <link>/notes/git-1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/git-1/</guid>
        <description>本篇笔记的内容包括常用命令以及 commit message 规范
常用命令  名词 workplace 工作区
stage 暂存区
repository 本地仓库
remote 远程仓库
 新建仓库 git init 在当前目录新建一个本地仓库
git clone 将一个远程仓库的内容下载到本地
 文件的增加、删除、提交 git add [filename] 将文件从工作区添加到暂存区
git rm [filename] 删除工作区文件
git rm --cached [filename] 停止追踪指定文件，但该文件会保留在工作区
git mv [originalname] [newname] 文件重命名，并将该文件放入暂存区
git commit - &amp;quot;message&amp;quot; 将暂存区文件提交到本地仓库
git commit -amend -m &amp;quot;message&amp;quot; 用一次新的 commit 代替上次 commit，可以用来改写 commit message
 分支管理 git branch 查看所有本地分支
git branch -a 查看所有本地分支与远程分支
git branch [branch] 新建一个分支，但依然停留在当前分支</description>
      </item>
    
      <item>
        <title>git 笔记(2) 进阶学习</title>
        <link>/notes/git-2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/git-2/</guid>
        <description>你真的懂git rebase吗？
详解git pull和git fetch的区别：</description>
      </item>
    
      <item>
        <title>package.json 与 package-lock.json</title>
        <link>/notes/package.json-package-lock.json/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/package.json-package-lock.json/</guid>
        <description>package.json 描述项目所需要的各种模块以及配置信息，可以手动编写，也可以在项目根目录用 npm init 自动生成
{&amp;quot;name&amp;quot;: &amp;quot;tech-doc-hugo&amp;quot;,&amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,&amp;quot;description&amp;quot;: &amp;quot;Hugo theme for technical documentation.&amp;quot;,&amp;quot;main&amp;quot;: &amp;quot;none.js&amp;quot;,&amp;quot;scripts&amp;quot;: {&amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;},&amp;quot;repository&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,&amp;quot;url&amp;quot;: &amp;quot;git+https://github.com/google/docsy-example.git&amp;quot;},&amp;quot;author&amp;quot;: &amp;quot;&amp;quot;,&amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,&amp;quot;bugs&amp;quot;: {&amp;quot;url&amp;quot;: &amp;quot;https://github.com/google/docsy-example/issues&amp;quot;},&amp;quot;homepage&amp;quot;: &amp;quot;https://github.com/google/docsy-example#readme&amp;quot;,&amp;quot;dependencies&amp;quot;: {},&amp;quot;devDependencies&amp;quot;: {&amp;quot;autoprefixer&amp;quot;: &amp;quot;^9.8.6&amp;quot;,&amp;quot;postcss-cli&amp;quot;: &amp;quot;^7.1.2&amp;quot;}}package.json 文件要求必须包括name 和 version 属性
 author：作者，是在 npmjs.org 网站上的有效账户名 main：指定加载入口，默认值时模块根目录下的 index.js script：指定命令行缩写所要执行的命令，默认是一个空的 test 脚本 repository：代码库地址，会直接在组件库的 npm 首页生效 bugs：开发者联系方式，一般是代码库的 issues 地址 dependencies：指定项目运行所需要的模块 devDependencies：指定项目开发所需要的模块 bin：指定各个内部命令对应的可执行文件的位置 license：开源协议，可看Choose an open source license config：用于添加命令行的环境变量  package-lock.</description>
      </item>
    
      <item>
        <title> LeetCode 刷题记录</title>
        <link>/posts/leetcode/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/posts/leetcode/</guid>
        <description>数据结构  数组 合并两个有序数组
删除有序数组中的重复项
只出现一次的数字
二分查找
移除元素
两个数组的交集
转置矩阵
搜索插入位置
存在重复元素
数组的度
数组的相对排序
 链表 反转链表
合并两个有序链表
环形链表
删除排序链表中的重复元素
相交链表
移除链表元素
删除链表中的节点
 哈希表 两数之和
罗马数字转整数
多数元素
 字符串 字符串相加
最长公共前缀
验证回文串
反转字符串
 栈与队列 有效的括号
删除字符串中的所有相邻重复项
最小栈
用栈实现队列
用队列实现栈
 树 二叉树的最大深度
翻转二叉树
对称二叉树
合并二叉树
平衡二叉树
二叉树的直径
二叉树的所有路径
二叉树的前序遍历
二叉树的中序遍历
二叉树的后序遍历
路径总和
算法  排序  贪心  动态规划 爬楼梯
最大子序和
杨辉三角
 回溯 </description>
      </item>
    
      <item>
        <title>使用 netlify 预览 GitHub 上的 PR</title>
        <link>/notes/netlify/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/netlify/</guid>
        <description>netlify 是一个可以用来构建、部署、协作处理 Web 应用程序的云平台
本篇笔记介绍了如何在 GitHub 上添加 netlify 以便预览提交的 pull request 效果
安装准备 在 GitHub 上安装 Netlify ，授权 GitHub 账号
New site from Git 选择平台 - 选择仓库 - 选择分支 - 基本设置 - deploy site
 基本设置 常见框架对应的 Build command 和 Publish directory
 环境变量 如果第一次 deploy 失败，首先查看版本是否正确
Site settings &amp;gt; Build &amp;amp; deploy &amp;gt; Environment &amp;gt; Environment variables
 修改域名 netlify 会自动以你的 site name 生成一个域名：[name-of-your-site].netlify.app
进入 Domain Setting &amp;gt; Domain management &amp;gt; Custom domains，可以通过修改 site name 修改域名</description>
      </item>
    
      <item>
        <title>在 GitHub 上参与项目应该知道的事</title>
        <link>/posts/github-opensource-project/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/posts/github-opensource-project/</guid>
        <description>有些内容写得比较简略，因为网上随便一搜就有很多详细笔记
慢慢丰富经验慢慢补充
参与项目的基本流程  找到你想要参与的项目 如果毫无头绪，我认为最好从自己熟悉的项目开始下手。在之前做项目的过程中肯定用过许多其他工具，在 GitHub 上搜索它们，会是一个不错的开始。
 仔细阅读项目文档代码 很多开源项目都有 contributing guidelines 类似的文档，请一定要完整阅读它们，这是最基本的礼节。
当然应该阅读源码，这也是最基本的礼节。至少阅读你感兴趣准备参与的部分。
 看看 Issues 都有些什么 很多开源项目在 Issues 板块都会有 good first issue ，这是第一次参与的不错选择
最开始参与项目的时候自己可能没有什么方向，可以从解决 Issues 里的问题开始下手
 pull request 基本流程 如果你对项目里的一些问题有了解决方案，可以通过 pull request 提交代码
 fork 你想要参与的项目，它就会出现在你的仓库列表里 将你自己仓库里的这个项目 git clone 到本地 在本地仓库 git remote add upstream 原仓库地址 ，与原仓库建立连接 创建一个新的分支，然后开始修改代码 把改好的代码推送到自己的远程仓库 在 GitHub 自己的仓库页面上就可以看到 New pull request 按钮   等待 review 结果 项目管理者会对你提交的代码 review 进行 review，如果没有问题就会将你的代码 merge 到项目源码里，一次 pull request 就这样完成啦</description>
      </item>
    
      <item>
        <title>关于我</title>
        <link>/about/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/about/</guid>
        <description> 个人介绍 大家好，我是四川大学化学系2022届在读本科生，从2020年11月开始零基础转码，一路上遇到了无数问题与困难，同样也得到了无数帮助与鼓励，真的非常感激曾经遇到的每一位朋友。所以也想在这里记录一些自己的经验，希望能够或多或少帮助到其他人。祝愿大家都能探索出自己的路！
要特别感谢豆瓣的 Women In Tech 小组，当我在计算机的道路上艰难摸索时，这个小组给予了我最大的帮助与支持，在这里收获了很多姐妹给予的力量。希望科技行业能有越来越多有力量的女性，也希望我的这些经验分享能为此目标增添一份绵薄之力。
 有任何问题可以与我联系： 名字邮箱主题打个招呼!有个问题?内容</description>
      </item>
    
  </channel>
</rss>