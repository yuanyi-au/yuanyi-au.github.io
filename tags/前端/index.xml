<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on 方圆之所</title>
    <link>https://yuanyi-au.github.io/tags/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on 方圆之所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021 Yuanyi. All rights reserved.</copyright>
    <lastBuildDate>Wed, 03 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yuanyi-au.github.io/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo 详细笔记（建站教程、工作原理）</title>
      <link>https://yuanyi-au.github.io/posts/hugo/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyi-au.github.io/posts/hugo/</guid>
      <description>基本概念 什么是 Hugo Hugo 是一个用 Go 编写的快速静态网站生成器，具有极快的构建速度（每个页面小于1毫秒），拥有大量现成主题，在开发过程中通过 liveload 即时渲染更改，可以托管在任何平台，是一个理想的建站工具。
静态网站生成器 网站生成器的目的是将内容转换为 HTML 文件，大多数网站生成器是动态的，这意味着每次用户请求页面时 HTTP 服务器都会运行生成器以创建新的 HTML 文件。动态站点生成器会将 HTML 文件缓存下来，以提高页面的加载速度。而 Hugo 更进一步，将 HTML 文件直接在计算机上渲染。在将文件复制到托管 HTTP 服务器的计算机之前可以在本地查看这些文件。因为 HTML 文件不是动态生成的，所以 Hugo 是一个静态网站生成器。
快速建站 快速开始 在 Windows 上安装 最简单的方法是直接下载 最新版本的 hugo 安装
请安装 extended 版本，可以对 scss 文件进行编译，否则在之后使用模板时会出现问题
注意：要把 hugo 的路径添加到环境变量 Path 中！
我自己在下载安装扩展版本的时候有点问题，最后重新用 Chocolatey 安装成功，非常方便。其它系统的安装过程可以看 官网文档。
新建网站 hugo version 检查安装是否成功
hugo new site [sitename] 创建一个新的网站
hugo server 开启 Hugo 服务器，可以在本地预览调试网站
结构目录 .├── archetypes ├── config.</description>
    </item>
    
    <item>
      <title>浏览器基本原理</title>
      <link>https://yuanyi-au.github.io/posts/browser/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyi-au.github.io/posts/browser/</guid>
      <description>浏览器简介 目前的主流浏览器有五个：IE、Firefox、Safari、Chrome 和 Opera
浏览器的主要功能是向服务器发出请求，然后在浏览器窗口中呈现返回的资源
浏览器的主要组件有：
 用户界面 浏览器引擎 渲染引擎 网络 UI 后端 JavaScript 解释器 数据存储  进程与线程  进程：资源（CPU、内存）分配的最小单位 线程：是在进程内部的程序运行单位  每打开一个新的标签页就新建了一个进程（如果后期标签页过多可能会合并进程）
浏览器中的主要进程 浏览器进程、第三方插件进程、GPU 进程、渲染进程
 多进程的优点：某一页面进程出问题不会影响其他页面，避免不同页面的权限问题，以及第三方插件的问题 多进程的缺点：内存消耗大，不同进程中常常包含相同内容  死锁 在多个进程执行过程中因资源争夺而造成的僵持状态，此时若没有干预这些线程就都将无法向前推进。
  产生死锁的必要条件
 互斥条件：进程要求对所分配的资源进行排它性控制 请求和保持条件：当进程因请求资源而阻塞时，对已经获得的资源保持不放 不剥夺条件：进程已获得的资源在未使用完之前，不能剥夺，只能在使用完时由自己释放 环路等待条件：在发生死锁时，必然存在一个进程-资源的环形链    解决死锁的方法
  预防死锁
 一次性分配所有资源，这样就不会再请求资源了 如果某进程获得了部分资源，但得不到剩下的资源，则释放已有资源（超时放弃） 给资源编号，有序分配    避免死锁
 在进行资源分配前先计算安全性，若安全才进行分配，否则进程等待 银行家算法    解除死锁
 从其他进程中剥夺资源给死锁进程，以解除死锁状态 直接撤销死锁进程，或撤销代价最小的进程直到资源足够接触死锁进程为止      渲染进程（浏览器内核） 渲染进程也就是我们说的浏览器内核</description>
    </item>
    
    <item>
      <title>React.js 小书笔记</title>
      <link>https://yuanyi-au.github.io/posts/reactjsbook/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyi-au.github.io/posts/reactjsbook/</guid>
      <description>React.js 小书在线阅读
React.js 基础知识 MVVM（Model-View-ViewModel）：是 MVC（Model View Controller） 的改进版，一种将图形用户界面开发与业务逻辑或后端逻辑的开发分离开来的软件架构模式。
 Model层：请求的原始数据 View层：视图展示，由ViewController来控制 ViewModel层：负责业务处理和数据转化  可以参考 什么是MVVM
React 只是一个库，而不是框架，它只提供 UI 也就是 View 层面的解决方案，需要结合其它的库（如 Redux、React-router ）来协助提供完整的解决方法。
JSX 一个 DOM 元素包含的信息其实只有三个：标签名，属性，子元素，这些信息既可以用 HTML 也可以用 JS 来描述，但 HTML 写起来比 JS 简便许多。 于是 React.js 把 JS 语法扩展了一下，支持直接在 JS 代码里面编写类似 HTML 标签结构的语法，也就是 JSX。JSX 在编译的时候会变成相应的 JavaScript 对象描述。
ReactDOM.render(&amp;lt;Header /&amp;gt;, document.getElementById(&#39;root&#39;))//会被编译成：ReactDOM.render(React.createElement(Header, null), document.getElementById(&#39;root&#39;))从 JSX 到页面经历的过程：
不直接从 JSX 直接渲染构造 DOM 结构的原因：
元素不一定会被渲染到浏览器页面上，也可能渲染到 canvas 或者 RN 上</description>
    </item>
    
    <item>
      <title>使用 Netlify 部署个人网站以及预览 GitHub 上的 PR</title>
      <link>https://yuanyi-au.github.io/posts/netlify/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyi-au.github.io/posts/netlify/</guid>
      <description>Netlify 是一个可以用来构建、部署、协作处理 Web 应用程序的云平台。本篇笔记介绍了如何在 GitHub 上添加 Netlify 以便预览提交的 Pull Request 效果。
也可以参考此笔记将自己的网站部署在 Netlify 上
安装准备 在 GitHub 上安装 Netlify ，授权 GitHub 账号
或者你也可以选择在 Netlify 官网 上进行注册授权
New site from Git 选择平台 - 选择仓库 - 选择分支 - 基本设置 - deploy site
基本设置 常见框架对应的 Build command 和 Publish directory 可以看 官网文档
环境变量 如果第一次 deploy 失败，请查看环境设置，检查版本是否正确
Site settings &amp;gt; Build &amp;amp; deploy &amp;gt; Environment &amp;gt; Environment variables
修改域名 Netlify 会自动以你的 site name 生成一个域名：[name-of-your-site].netlify.app</description>
    </item>
    
  </channel>
</rss>
