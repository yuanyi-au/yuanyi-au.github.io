<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yuanyi&#39;s blog</title>
    <link>/notes/</link>
    <description>yuanyi 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2021, yuanyi; All rights reserved.</copyright><atom:link href="/notes/index.xml" rel="self" type="application/rss+xml" />
      <item>
        <title>git 笔记 (1)</title>
        <link>/notes/git-1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/git-1/</guid>
        <description>git 笔记 (1) 本篇笔记内容包括常用命令以及 commit message 规范
 常用命令  名词 workplace 工作区
stage 暂存区
repository 本地仓库
remote 远程仓库
 新建仓库 git init 在当前目录新建一个本地仓库
git clone 将一个远程仓库的内容下载到本地
 文件的增加、删除、提交 git add [filename] 将文件从工作区添加到暂存区
git rm [filename] 删除工作区文件
git rm --cached [filename] 停止追踪指定文件，但该文件会保留在工作区
git mv [originalname] [newname] 文件重命名，并将该文件放入暂存区
git commit - &amp;quot;message&amp;quot; 将暂存区文件提交到本地仓库
git commit -amend -m &amp;quot;message&amp;quot; 用一次新的 commit 代替上次 commit，可以用来改写 commit message
 分支管理 git branch 查看所有本地分支</description>
      </item>
    
      <item>
        <title>git 笔记 (2)</title>
        <link>/notes/git-2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/git-2/</guid>
        <description>git 笔记 (2)  git rebase  合并不同分支的提交 将 b 分支上的提交合并到 a 分支上成为一条直线
git checkout bgit rebase a 与 merge 的区别 永远不要在公共项目里使用 rebase
merge 采用的是三方合并的原则，没有公共提交节点就无法进行合并
git rebase: git merge: rebase 和 merge 的另一个区别是 rebase 的冲突是一个一个解决，先解决第一个，然后用命令
git add -ugit rebase --continue继续后才会出现第二个冲突，直到所有冲突解决完，而 merge 是所有的冲突都会显示出来。另外如果 rebase 过程中，你想中途退出，恢复 rebase 前的代码则可以用命令
git rebase --abort
 合并本地的多次提交 合并最新的三次提交
git rebase -i HEAD~3
git reabse -i 合并 commit 之后会出现一个匿名的分支，并不是在原来的分支上把 commit 给合并，而是从合并的 start point 开始新生成一个匿名分支然后把原来分支那几个 commit 作为一个 commit 放到新分支上</description>
      </item>
    
      <item>
        <title>利用 Hugo 搭建网站</title>
        <link>/notes/hugo-website/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/hugo-website/</guid>
        <description>利用 Hugo 搭建网站 本篇笔记介绍了如何利用 Hugo 框架搭建网站并部署到 GitHub 上，以及我在建站过程中遇到的问题和解决办法
 快速开始  Windows: 最简单的方法是直接下载 最新版本的 hugo 安装
请安装 extended 版本，可以对 scss 文件进行编译，否则在之后使用模板时会出现问题
注意：要把 hugo 的路径添加到环境变量 Path 中！
我在下载安装扩展版本的时候有点问题，最后重新用 Chocolatey 安装成功，非常方便
 MacOS： 其它系统的安装过程可以看官网文档
 新建网站 hugo version 检查安装是否成功
hugo new site [sitename] 创建一个新的网站
hugo server 开启 Hugo 服务器，可以在本地预览调试网站
 结构目录 .├── archetypes ├── config.toml├── content├── data├── layouts├── static└── themes content 文件夹 存放网站的主要内容 md 文件</description>
      </item>
    
      <item>
        <title>package.json 与 package-lock.json</title>
        <link>/notes/package.json-package-lock.json/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/package.json-package-lock.json/</guid>
        <description>package.json 与 package-lock.json  package.json 描述项目所需要的各种模块以及配置信息，可以手动编写，也可以在项目根目录用 npm init 自动生成
{&amp;quot;name&amp;quot;: &amp;quot;tech-doc-hugo&amp;quot;,&amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,&amp;quot;description&amp;quot;: &amp;quot;Hugo theme for technical documentation.&amp;quot;,&amp;quot;main&amp;quot;: &amp;quot;none.js&amp;quot;,&amp;quot;scripts&amp;quot;: {&amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;},&amp;quot;repository&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,&amp;quot;url&amp;quot;: &amp;quot;git+https://github.com/google/docsy-example.git&amp;quot;},&amp;quot;author&amp;quot;: &amp;quot;&amp;quot;,&amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,&amp;quot;bugs&amp;quot;: {&amp;quot;url&amp;quot;: &amp;quot;https://github.com/google/docsy-example/issues&amp;quot;},&amp;quot;homepage&amp;quot;: &amp;quot;https://github.com/google/docsy-example#readme&amp;quot;,&amp;quot;dependencies&amp;quot;: {},&amp;quot;devDependencies&amp;quot;: {&amp;quot;autoprefixer&amp;quot;: &amp;quot;^9.8.6&amp;quot;,&amp;quot;postcss-cli&amp;quot;: &amp;quot;^7.1.2&amp;quot;}}package.json 文件要求必须包括name 和 version 属性
 author：作者，是在 npmjs.</description>
      </item>
    
      <item>
        <title>使用 Netlify 部署个人网站以及预览 GitHub 上的 PR</title>
        <link>/notes/netlify/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/notes/netlify/</guid>
        <description>使用 Netlify 部署个人网站以及预览 GitHub 上的 PR Netlify 是一个可以用来构建、部署、协作处理 Web 应用程序的云平台
本篇笔记介绍了如何在 GitHub 上添加 Netlify 以便预览提交的 Pull Request 效果
也可以参考此笔记将自己的网站部署在 Netlify 上
 安装准备 在 GitHub 上安装 Netlify ，授权 GitHub 账号
或者你也可以选择在 Netlify 官网 上进行注册授权
 New site from Git 选择平台 - 选择仓库 - 选择分支 - 基本设置 - deploy site
 基本设置 常见框架对应的 Build command 和 Publish directory 可以看 官网文档
 环境变量 如果第一次 deploy 失败，请查看环境设置，检查版本是否正确
Site settings &amp;gt; Build &amp;amp; deploy &amp;gt; Environment &amp;gt; Environment variables</description>
      </item>
    
  </channel>
</rss>