[{"content":"学习历程 慢慢反思总结写一下这段时间走过的路\u0026hellip;\u0026hellip;\n第一阶段（2020.11初~2021.1中） 当初开始学计算机可能是想尝试一下其他道路，反正我也很喜欢接触新东西，更新自己感觉很快乐。学了 Python 之后发现自己还蛮有兴趣的，每天疯狂搜索各种东西，最后决定转码。因为这段时间也正好在大三上的后半学期，期末月还是挺忙的，学得比较水，现在 Python 已经基本忘光了。当时确定考完试就开始学前端。\n刚开始是跟着廖雪峰的网站学，半途开始看慕课上的 Python 入门课程（好像是北理的？反正很火的那个），我觉得如果是完全计算机零基础的话应该先看慕课，因为慕课会讲到一些计算机的基础概念。\n第二阶段（2021.1中~2021.4中） 从寒假一开始就开始学 JavaScript/CSS/HTML，同时学了计算机网络、数据结构与算法，大概到三月份的时候开始学 React。整个假期每天在家几乎所有时间都在面对电脑，因为想在开学之后尽快找实习。\n前端部分是在 GitHub 上找了个教程，计网看了谢希仁的《计算机网络》（我居然坚持一字不漏地看完了哈哈，现在也忘光了），数据结构看了慕课上北大的 python 数据结构课程，还有《算法图解》《剑指offer》。\n第三阶段（2021.4末~2021.5初） 开始疯狂实战做项目，跟着油管视频七天敲了八个小项目（油管项目超级多，从这里上手挺不错的），然后开始自己模仿着写，做了个简单的 React 网站，学了点 React Native 做了个小项目。\n然后，就开始投简历找实习，但最后因为学校的原因，以及和几个面试官聊过之后感觉自己还是更想沉下心来继续学习，就放弃了找实习。\n第四阶段（2021.5初~2021.6末） 这段时间基本在忙期末和学校安排的实习，申请了开源之夏的项目，空闲时间继续学习，在看红宝书。\n第五阶段（2021.7初~2021.8末） 这段时间可能是我收获最大的时期，第一次参与开源项目，和别人合作体验到了这行的氛围。转码大半年，终于到了面临秋招的时刻，我也忽然开始反思许多东西，思考自己对未来的真正期望（是很复杂很私人的问题，以后会写文章说说）。\n第六阶段（2021.8末~unknow） 秋招开始，大概之后也没有什么好说的啦，找到工作后会好好总结，希望这一天快点到来。\n","lvl0":"学习历程","lvl1":"转码","lvl2":"摘要","objectID":"344025b5b646606afbe2a4bb513a904a","tags":[],"url":"https://yuanyi-au.github.io/posts/learning-process/"},{"content":"开源入门之路 今年夏天有幸参与了 OSPP 2021 这个活动，终于第一次真正接触到向往已久的开源，以这篇文章记录我在这条路上的旅程，希望能越走越远，以后有更多经验分享给大家。\n前言 首先我想说的是，参与开源并不是必须贡献代码，文档写作、视觉设计、组织宣传等也是项目中非常重要的部分。以及在项目社区或者 GitHub Issues 里进行反馈和解答其他人提出的问题，这些都是对开源社区很好的贡献。\n参与开源你需要知道的最重要的事情就是，大胆提问，大胆提交 PR。\n如果项目文档和谷歌搜索都不能解决你的疑问，不要害怕提问，项目维护者能够快速帮助你找到解决问题的方向，而且换个角度想，其他拥有同样疑惑的人也能搜索到你与项目维护者的交流过程，从中受益。也不要担心自己的代码不够好，项目维护者会对你提交的代码进行 review，如果有问题会给出建议，这其实是一个很好的学习机会。\n在这篇文章里有提到，实际上 28% 的贡献都是随意贡献（比如修正语法排版错误等），修补 bug 的贡献其实也只占到 30%。所以，不要担心，勇敢地在项目中积极交流贡献。\n最后一点，保持礼貌！\n参与项目的基本流程 找到你想要参与的项目 如果毫无头绪，我认为最好从自己熟悉的项目开始下手。在之前做项目的过程中肯定用过许多其他工具，在 GitHub 上搜索它们的项目仓库会是一个不错的开始。当然你也可以通过 GitHub 的 Explore 板块，或者 Open Source Friday 之类的网站来寻找项目。\n请注意一个项目的活跃度以及最后活跃时间，项目维护者对 issue 以及 PR 的响应速度如何，以及整个项目的交流氛围，这些都是非常重要的考虑因素。\n较大的开源项目都会有 CONTRIBUTING 文档，用来说明如何为项目做贡献，请仔细阅读。\n看看 Issues 都有些什么 很多开源项目在 Issues 板块都会有 good first issue ，这些 Issue 通常都比较容易上手，有的项目负责人还会给出一些参考指引，是为了让第一次参与该项目的贡献者能够快速熟悉和参与到项目中来。\n如果你想要做出某个实际贡献，先看看 Issues 里有没有类似的问题以及是否被解决，如果没有，你可以先创建一个 Issue 让参与项目的其他人知道你要进行这方面的工作，总之，将问题进度公开，以避免重复劳动。\n创建 Issue 要注意的问题：\n 提供具体的环境配置、操作步骤以及问题的详细情况 用文字描述，方便其他人检索 做好标签分类  Pull Request 基本流程 如果你对项目里的一些问题有了解决方案，可以通过 pull request 提交代码\n fork 你想要参与的项目，它就会出现在你的仓库列表里 将你自己仓库里的这个项目 git clone 到本地 在本地仓库 git remote add upstream 原仓库地址 ，与原仓库建立连接 创建一个新的分支，然后开始修改代码 把改好的代码推送到自己的远程仓库 在 GitHub 自己的仓库页面上就可以看到 New pull request 按钮  等待 review 结果 项目维护者会对你提交的代码进行 review，如果你提交的代码存在问题，对方会做出说明，希望调整代码或者是代码不被接受的原因。如果没有问题，你的代码就将会被 merge 到项目源码里，一次贡献就这样完成了！\n如果你的 PR 暂时没有得到回应，请耐心等待，如果时间超过一周，可以尝试 @ 相关负责人。\n参与到开源社区中 如果你对某个社区产生兴趣想要参与，在社区的官网或者 GitHub 上都能找到联系方式（比如 邮件列表、Slack、SIG 会议）。\nSIG (Special Interest Group) ：很多社区会定期举办 SIG 会议，不要害怕参与进去。一般来说社区会维护每次 SIG 会议的会议文档以及会议录屏，也可以通过这些方式了解社区或者项目的动态。\nGitHub 上常见的交流缩写  WIP：Work in progress, do not merge yet. // 开发中 LGTM：Looks good to me. // PR 经过 review 没有问题 CC：Carbon copy. // 抄送某人 RFC：request for comments. // 我们来讨论下这个问题 ACK：acknowledgement. NACK/NAK：negative acknowledgement.  开源指南 GitHub 开源软件指南\nGitee 开源指北\n开源最佳实践\n","lvl0":"开源入门之路","lvl1":"开源","lvl2":"摘要","objectID":"eb0208afde257ed9fed9eee0effd22e7","tags":["opensource"],"url":"https://yuanyi-au.github.io/posts/opensource/"},{"content":"使用 Netlify 部署个人网站以及预览 GitHub 上的 PR Netlify 是一个可以用来构建、部署、协作处理 Web 应用程序的云平台\n本篇笔记介绍了如何在 GitHub 上添加 Netlify 以便预览提交的 Pull Request 效果\n也可以参考此笔记将自己的网站部署在 Netlify 上\n安装准备 在 GitHub 上安装 Netlify ，授权 GitHub 账号\n或者你也可以选择在 Netlify 官网 上进行注册授权\nNew site from Git 选择平台 - 选择仓库 - 选择分支 - 基本设置 - deploy site\n基本设置 常见框架对应的 Build command 和 Publish directory 可以看 官网文档\n环境变量 如果第一次 deploy 失败，请查看环境设置，检查版本是否正确\nSite settings \u0026gt; Build \u0026amp; deploy \u0026gt; Environment \u0026gt; Environment variables\n修改域名 Netlify 会自动以你的 site name 生成一个域名：[name-of-your-site].netlify.app\n进入 Domain Setting \u0026gt; Domain management \u0026gt; Custom domains，可以通过修改 site name 修改域名\n为 PR 生成预览 进入 Site settings \u0026gt; Build \u0026amp; deploy \u0026gt; Deploy notifications\n选择 ”Add notification“ ，在下拉菜单中选择 “GitHub Pull Request Comment” ，然后选择 “Deploy Preview succeeded” ，保存\n现在每个新出现的 PR 都会自动生成一个评论，包含预览链接 deploy-preview-4--yoursitename.netlify.app\n对开源项目的支持 如果是开源项目，可以阅读 Open Source Plan Policy 相关内容，提交申请表单，就能免费享有 Pro 的功能，团队成员数量无限制\n参考资料 Netlify 官网文档\nHow to Setup Previews For PRs on Your GitHub Repo Using Netlify \n","lvl0":"使用 Netlify 部署个人网站以及预览 GitHub 上的 PR","lvl1":"前端工具","lvl2":"摘要","objectID":"35c99fa978e75d7b438849d45e8d7641","tags":["deploy","blog"],"url":"https://yuanyi-au.github.io/posts/netlify/"},{"content":"利用 Hugo 搭建网站 本篇笔记介绍了如何利用 Hugo 框架搭建网站并部署到 GitHub 上，以及我在建站过程中遇到的问题和解决办法\n快速开始 Windows: 最简单的方法是直接下载 最新版本的 hugo 安装\n请安装 extended 版本，可以对 scss 文件进行编译，否则在之后使用模板时会出现问题\n注意：要把 hugo 的路径添加到环境变量 Path 中！\n我在下载安装扩展版本的时候有点问题，最后重新用 Chocolatey 安装成功，非常方便\nMacOS： 其它系统的安装过程可以看官网文档\n新建网站 hugo version 检查安装是否成功\nhugo new site [sitename] 创建一个新的网站\nhugo server 开启 Hugo 服务器，可以在本地预览调试网站\n结构目录 .\r├── archetypes ├── config.toml\r├── content\r├── data\r├── layouts\r├── static\r└── themes\rcontent 文件夹 存放网站的主要内容 md 文件\n在该文件夹下的文件结构目录直接对应网站结构\n通常md文件开头如下（一般可以在 archetypes 文件夹中找到）：\n---\rtitle: \u0026quot;Helloworld\u0026quot;\rdate: {{ .Date }}\rdraft: true\r---\r除了 title 必需，其他可以省略\nlayouts 文件夹 存放网站 HTML 模板，包括 index、particials、single page、list pages 等\nthemes文件夹 存放现有的 Hugo 主题模板\nconfig.toml 文件 配置文件，最基础的设置如下：\nbaseURL = \u0026quot;http://example.org/\u0026quot;\rlanguageCode = \u0026quot;en-us\u0026quot;\rtitle = \u0026quot;Blog\u0026quot;\r#导航栏菜单\r[menu]\r[[menu.main]]\ridentifier = \u0026quot;about\u0026quot;\rname = \u0026quot;about\u0026quot;\rurl = \u0026quot;/about\u0026quot;\rweight = 1 #weight数字越小排序越靠前\r主题外观 可以直接使用 Hugo 现有的主题模板，也可以自己编写主题模板\n使用现有主题   在 Hugo 官网 或者 GitHub 上寻找合适的 Hugo 主题\n  进入 themes 文件夹，git clone 想要使用的主题\n  在配置文件中添加主题：theme = \u0026quot;themename\u0026quot;\n  现有主题模板的个性化 themes 文件夹里主要修改 assets 和 layouts 两个文件夹，前者存放 css 和 js 文件，后者存放 html 文件\nlayouts 文件夹里主要修改 partials 和 shortcodes 两个文件夹里的 html 文件\n自己创建主题   在 layout 中创建 _default 文件夹、 index.html 和 404.html 文件\n  在 _default 文件夹中创建 single.html 和 list.html 文件\n  在 static 文件夹中创建 css 文件定义样式\n  注意：在 _index.md 中的内容永远都会依照 list 模板渲染，而非 single\n站点部署 把网站部署到 GitHub 上   在 GitHub 上创建一个新仓库 A ，名字随便起（例如 blog），该仓库用于存放完整的代码\n  创建另一个新仓库 B ，起名为 github_id.github.io （例如 yuanyi-au.github.io ），该仓库用于网站部署\n  将本地代码与 GitHub 上的仓库 A 关联\n  进入本地代码文件根目录：\ngit submodule add -b main \u0026lt;仓库 B 地址\u0026gt; public\n  生成 public 文件夹并将其关联到仓库 B 上，push 之后可以在 GitHub 仓库 B 的页面上看到 public 文件夹的内容\n在仓库 B 的设置中可以找到 GitHub Pages，可以看到网站地址 github_id.github.io，就可以进行访问了  注意：public 文件夹的内容需要每次在项目根目录执行 hugo 命令后才会更新\n把网站部署到 Netlify 上 可以参考这篇笔记 使用 netlify 预览 GitHub 上的 PR ，不做最后一步就行啦\n其他问题 Public 文件夹渲染出错 问题描述：\nhugo server 在本地运行时没有问题，但部署上线后打开网页发现渲染缺失 css 和 js 文件\n问题解决：\n问题出在 Hugo 本身处理 URL 的方式上，可以参见 issue\nbaseURL = \u0026quot;//example.org\u0026quot;\rrelativeURLs = true\r上面的方法没有解决我的问题，后来试了两种方法可行：\n# baseURL = \u0026quot;example.org\u0026quot;\nbaseURL = \u0026quot;\\\u0026quot;\n找不到新增的页面 问题描述：\n增加的内容在 index 页面有链接，但点开却找不到页面\n问题解决：\n使用 hugo -t theme_name 代替 hugo 命令进行编译\n图片加载问题 问题描述：\nMarkdown 文档里的本地图片无法显示\n解决方法：\n我搜了很多类似答案，都不能解决我的问题，自己试了很久之后发现这个方法可以\n目录结构：\n\r├── content\r└── posts ├── cat.md\r├── dog.md\r└── images\r├── cat.png\r└── dog.png\r在图片链接： ![dog](../images/dog.png)\n最后修改时间 可以通过两种方式记录 Last Modified 时间\n 在文档开头加上时间  date: 1990-01-01T00:00:00+00:00\rlastmod: 1995-04-04T00:00:00+00:00\r在 config.toml 内设置使用 Git 记录  enableGitInfo = true\n参考资料 Hugo - Static Site Generator | Tutorial \nCreating a Blog with Hugo and Github in 10 minutes \nCreating your own Hugo Theme! \nCreating a Hugo Theme From Scratch \n","lvl0":"利用 Hugo 搭建网站","lvl1":"Hugo","lvl2":"摘要","objectID":"3e761ff4365f5e33a24f1a33806c48df","tags":["hugo","blog"],"url":"https://yuanyi-au.github.io/posts/hugo-website/"},{"content":"package.json 与 package-lock.json package.json 描述项目所需要的各种模块以及配置信息，可以手动编写，也可以在项目根目录用 npm init 自动生成\n{\r\u0026quot;name\u0026quot;: \u0026quot;tech-doc-hugo\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;0.0.1\u0026quot;,\r\u0026quot;description\u0026quot;: \u0026quot;Hugo theme for technical documentation.\u0026quot;,\r\u0026quot;main\u0026quot;: \u0026quot;none.js\u0026quot;,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;\r},\r\u0026quot;repository\u0026quot;: {\r\u0026quot;type\u0026quot;: \u0026quot;git\u0026quot;,\r\u0026quot;url\u0026quot;: \u0026quot;git+https://github.com/google/docsy-example.git\u0026quot;\r},\r\u0026quot;author\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;license\u0026quot;: \u0026quot;ISC\u0026quot;,\r\u0026quot;bugs\u0026quot;: {\r\u0026quot;url\u0026quot;: \u0026quot;https://github.com/google/docsy-example/issues\u0026quot;\r},\r\u0026quot;homepage\u0026quot;: \u0026quot;https://github.com/google/docsy-example#readme\u0026quot;,\r\u0026quot;dependencies\u0026quot;: {},\r\u0026quot;devDependencies\u0026quot;: {\r\u0026quot;autoprefixer\u0026quot;: \u0026quot;^9.8.6\u0026quot;,\r\u0026quot;postcss-cli\u0026quot;: \u0026quot;^7.1.2\u0026quot;\r}\r}\rpackage.json 文件要求必须包括name 和 version 属性\n author：作者，是在 npmjs.org 网站上的有效账户名 main：指定加载入口，默认值时模块根目录下的 index.js script：指定命令行缩写所要执行的命令，默认是一个空的 test 脚本 repository：代码库地址，会直接在组件库的 npm 首页生效 bugs：开发者联系方式，一般是代码库的 issues 地址 dependencies：指定项目运行所需要的模块 devDependencies：指定项目开发所需要的模块 bin：指定各个内部命令对应的可执行文件的位置 license：开源协议，可看Choose an open source license config：用于添加命令行的环境变量  依赖模块的版本  指定版本 16.2.3 波浪号 ~16.2.3：安装 16.2.x 的最新版本 插入号 ^16.2.3：安装 16.x.x 的最新版本 latest：安装最新版本  package-lock.json 描述 node_modules 文件中所有模块的版本信息，模块来源及依赖的小版本信息，将整个依赖树锁死\n参考资料 npm 官网 package.json 文档\nnpm 官网 package-lock.json 文档\npackage.json文件\npackage.json 详解\npackage-lock.json\n","lvl0":"package.json 与 package-lock.json","lvl1":"其他","lvl2":"摘要","objectID":"80095058d003ba493a570e05d65670ce","tags":["deploy"],"url":"https://yuanyi-au.github.io/posts/package.json-package-lock.json/"},{"content":"git 笔记 (2) git rebase 合并不同分支的提交 将 b 分支上的提交合并到 a 分支上成为一条直线\ngit checkout b\rgit rebase a\r与 merge 的区别 永远不要在公共项目里使用 rebase\nmerge 采用的是三方合并的原则，没有公共提交节点就无法进行合并\ngit rebase: git merge: rebase 和 merge 的另一个区别是 rebase 的冲突是一个一个解决，先解决第一个，然后用命令\ngit add -u\rgit rebase --continue\r继续后才会出现第二个冲突，直到所有冲突解决完，而 merge 是所有的冲突都会显示出来。另外如果 rebase 过程中，你想中途退出，恢复 rebase 前的代码则可以用命令\ngit rebase --abort\n合并本地的多次提交 合并最新的三次提交\ngit rebase -i HEAD~3\ngit reabse -i 合并 commit 之后会出现一个匿名的分支，并不是在原来的分支上把 commit 给合并，而是从合并的 start point 开始新生成一个匿名分支然后把原来分支那几个 commit 作为一个 commit 放到新分支上\ncherry-pick 将其他分支上的提交应用于 a 分支\n在开源项目里很有用\ngit checkout a\rgit cherry-pick \u0026lt;CommitID\u0026gt;\r与 rebase 的区别 rebase 相当于剪切粘贴， cherry-pick 相当于复制粘贴\ngit reset 与 git revert git reset 回退到指定的提交版本\ngit revert 用一个新的提交来消除之前的提交，原来的 commit 内容依旧会保存在提交历史中\n两者的区别 reset 是在正常的提交历史中,删除了指定的 commit ，HEAD 向后移动，而 revert 是在正常的提交历史中再 commit 一次，只不过是反向提交可以抵消之前的提交，它的HEAD 是一直向前的\ngit pull 和 git fetch 的区别 打开本地 .git/refs 文件夹我们可以看到代表本地分支的 head 文件夹和代表正在跟踪的远程分支的 remotes 文件夹\n使用 git pull 会将两个文件夹里的 commit ID 都更新至远程库的最新 commit ID\n使用 git fetch 只会将 remotes 文件夹中的 commit ID 更新至远程库的最新 commit ID\ngit blame 可以查看某个文件里每一行代码的最后修改提交记录\ngit blame \u0026lt;filename\u0026gt;\nsign-off 在做开源项目时遇到要求 sign-off，用于证明提交作者\ngit commit -s -m \u0026quot;\u0026quot;\n参考资料 git rebase简介(基本篇)\n你真的懂git rebase吗？\nGit应用详解第九讲：Git cherry-pick与Git rebase\nGit版本恢复命令reset和revert\n详解git pull和git fetch的区别\ngit fetch和git pull之间的区别\n","lvl0":"git 笔记 (2)","lvl1":"Git","lvl2":"摘要","objectID":"a3cddfdcd16eb43441ad3446e44c09af","tags":["git"],"url":"https://yuanyi-au.github.io/posts/git-2/"},{"content":"git 笔记 (1) 本篇笔记内容包括常用命令以及 commit message 规范\n常用命令 名词 workplace 工作区\nstage 暂存区\nrepository 本地仓库\nremote 远程仓库\n新建仓库 git init 在当前目录新建一个本地仓库\ngit clone 将一个远程仓库的内容下载到本地\n文件的增加、删除、提交 git add [filename] 将文件从工作区添加到暂存区\ngit rm [filename] 删除工作区文件\ngit rm --cached [filename] 停止追踪指定文件，但该文件会保留在工作区\ngit mv [originalname] [newname] 文件重命名，并将该文件放入暂存区\ngit commit - \u0026quot;message\u0026quot; 将暂存区文件提交到本地仓库\ngit commit -amend -m \u0026quot;message\u0026quot; 用一次新的 commit 代替上次 commit，可以用来改写 commit message\n分支管理 git branch 查看所有本地分支\ngit branch -a 查看所有本地分支与远程分支\ngit branch [branch] 新建一个分支，但依然停留在当前分支\ngit checkout -b [branch] 新建一个分支并切换到该分支\ngit checkout [branch] 切换到指定分支，并更新工作区\ngit merge [branch] 将指定分支合并到当前分支\ngit branch -d [branch] 删除本地分支\ngit push origin --delete [branch] 删除远程分支\n远程仓库 git remote -v 查看所有远程仓库\ngit remote add [name] [url] 添加远程仓库\ngit remote remove [name] 删除远程仓库\ngit fetch [remote] 下载远程仓库的所有变动\ngit pull [remote] [branch] 下载远程仓库的变动并与本地仓库合并\ngit push [remote] [branch] 将本地分支推送到远程分支\n其他 git config --list 显示当前配置\ngit config -e 编辑配置文件\ngit status 显示所有变更文件\ngit log 显示当前分支的版本历史\ngit reset --soft [commit_id] 回退到某一个 commit 版本，工作区和暂存区不变\ngit reset --hard [commit_id] 回退到某一个 commit 版本，工作区和暂存区也随之更改\ngit diff 显示暂存区与工作区的差异\ncommit message 规范 通常我们都用 Angular 的规范，具体可以参见 Conventional Commits\n组成 commit message 包括三部分：header，body 和 footer\n\u0026lt;type\u0026gt;[optional scope]: \u0026lt;description\u0026gt;\r[optional body]\r[optional footer(s)]\rHeader  type：用于说明 commit 的类别  feat：增加新功能 fix：修 bug docs：文档变动 style：格式变动，不改变代码逻辑 refactor：重构（既非feat又非fix的影响代码运行的改动） test：增加测试 chore(or build)：构建过程或辅助工具变动 ci：与持续集成相关的变动 perf：改善性能   scope：用于说明 commit 影响的范围，例如数据层、控制层、视图层等 subject：用于描述 commit 目的  Body 对 commit 的详细描述，可以分成多行\nFooter 只用于两种情况：\n 当前代码与上一版本代码不兼容，则 footer 以 BREAKING CHANGE 开头，接着描述变动的内容、理由及迁移方法 针对某个 Issue，可以在 footer 部分关闭这个 Issue Close #65 #77  Revert 如果当前 commit 是用来撤销之前的 commit，则必须以 revert: 开头，后面跟着被撤销的 commit 的 header\nbody 部分则必须写成 This reverts commit 667ecc1654a317a13331b17617d973392f415f02.\n规则 优秀的 commit massage 应该遵循以下七条规则：\n subject 和 body 之间空一行 subject字数限制在50字符以内 行首字母大写 subject 不要以句号结尾 subject 使用祈使句 body 不超过72个字符 用 body 部分解释此次 commit 的改动及其原因  示例 feat(lang): add polish language\nrefactor!: drop support for Node 6 //使用感叹号代表 breaking change\nfix: correct minor typos in code\rsee the issue for details\ron typos fixed.\rReviewed-by: Z\rRefs #133\r参考资料 Conventional Commits 1.0.0\nHow to Write a Git Commit Message\nUnderstanding Semantic Commit Messages Using Git and Angular\n常用 Git 命令清单\nCommit message 和 Change log 编写指南\n","lvl0":"git 笔记 (1)","lvl1":"Git","lvl2":"摘要","objectID":"ae18c514c3853960bf6429b6874a3974","tags":["git"],"url":"https://yuanyi-au.github.io/posts/git-1/"}]